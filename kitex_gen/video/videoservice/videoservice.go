// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	video "dousheng/kitex_gen/video"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishVideo":      kitex.NewMethodInfo(publishVideoHandler, newPublishVideoArgs, newPublishVideoResult, false),
		"PublishList":       kitex.NewMethodInfo(publishListHandler, newPublishListArgs, newPublishListResult, false),
		"PublishVideoCount": kitex.NewMethodInfo(publishVideoCountHandler, newPublishVideoCountArgs, newPublishVideoCountResult, false),
		"GetFeedList":       kitex.NewMethodInfo(getFeedListHandler, newGetFeedListArgs, newGetFeedListResult, false),
		"GetPublishIds":     kitex.NewMethodInfo(getPublishIdsHandler, newGetPublishIdsArgs, newGetPublishIdsResult, false),
		"GetVideoInfo":      kitex.NewMethodInfo(getVideoInfoHandler, newGetVideoInfoArgs, newGetVideoInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PublishVideo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishVideoArgs:
		success, err := handler.(video.VideoService).PublishVideo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishVideoResult)
		realResult.Success = success
	}
	return nil
}
func newPublishVideoArgs() interface{} {
	return &PublishVideoArgs{}
}

func newPublishVideoResult() interface{} {
	return &PublishVideoResult{}
}

type PublishVideoArgs struct {
	Req *video.PublishActionRequest
}

func (p *PublishVideoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishVideoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishVideoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishVideoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishVideoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishVideoArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishVideoArgs_Req_DEFAULT *video.PublishActionRequest

func (p *PublishVideoArgs) GetReq() *video.PublishActionRequest {
	if !p.IsSetReq() {
		return PublishVideoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishVideoArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishVideoResult struct {
	Success *video.PublishActionResponse
}

var PublishVideoResult_Success_DEFAULT *video.PublishActionResponse

func (p *PublishVideoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishVideoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishVideoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishVideoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishVideoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishVideoResult) Unmarshal(in []byte) error {
	msg := new(video.PublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishVideoResult) GetSuccess() *video.PublishActionResponse {
	if !p.IsSetSuccess() {
		return PublishVideoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishVideoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishActionResponse)
}

func (p *PublishVideoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishListArgs:
		success, err := handler.(video.VideoService).PublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishListResult)
		realResult.Success = success
	}
	return nil
}
func newPublishListArgs() interface{} {
	return &PublishListArgs{}
}

func newPublishListResult() interface{} {
	return &PublishListResult{}
}

type PublishListArgs struct {
	Req *video.PublishListRequest
}

func (p *PublishListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishListArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishListArgs_Req_DEFAULT *video.PublishListRequest

func (p *PublishListArgs) GetReq() *video.PublishListRequest {
	if !p.IsSetReq() {
		return PublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishListResult struct {
	Success *video.PublishListResponse
}

var PublishListResult_Success_DEFAULT *video.PublishListResponse

func (p *PublishListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishListResult) Unmarshal(in []byte) error {
	msg := new(video.PublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishListResult) GetSuccess() *video.PublishListResponse {
	if !p.IsSetSuccess() {
		return PublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishListResponse)
}

func (p *PublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func publishVideoCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishVideoCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).PublishVideoCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PublishVideoCountArgs:
		success, err := handler.(video.VideoService).PublishVideoCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PublishVideoCountResult)
		realResult.Success = success
	}
	return nil
}
func newPublishVideoCountArgs() interface{} {
	return &PublishVideoCountArgs{}
}

func newPublishVideoCountResult() interface{} {
	return &PublishVideoCountResult{}
}

type PublishVideoCountArgs struct {
	Req *video.PublishVideoCountRequest
}

func (p *PublishVideoCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishVideoCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PublishVideoCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PublishVideoCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PublishVideoCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PublishVideoCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PublishVideoCountArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishVideoCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PublishVideoCountArgs_Req_DEFAULT *video.PublishVideoCountRequest

func (p *PublishVideoCountArgs) GetReq() *video.PublishVideoCountRequest {
	if !p.IsSetReq() {
		return PublishVideoCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PublishVideoCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type PublishVideoCountResult struct {
	Success *video.PublishVideoCountResponse
}

var PublishVideoCountResult_Success_DEFAULT *video.PublishVideoCountResponse

func (p *PublishVideoCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishVideoCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PublishVideoCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PublishVideoCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PublishVideoCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PublishVideoCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PublishVideoCountResult) Unmarshal(in []byte) error {
	msg := new(video.PublishVideoCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PublishVideoCountResult) GetSuccess() *video.PublishVideoCountResponse {
	if !p.IsSetSuccess() {
		return PublishVideoCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PublishVideoCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishVideoCountResponse)
}

func (p *PublishVideoCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFeedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetFeedList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedListArgs:
		success, err := handler.(video.VideoService).GetFeedList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedListArgs() interface{} {
	return &GetFeedListArgs{}
}

func newGetFeedListResult() interface{} {
	return &GetFeedListResult{}
}

type GetFeedListArgs struct {
	Req *video.FeedRequest
}

func (p *GetFeedListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.FeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFeedListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFeedListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFeedListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedListArgs) Unmarshal(in []byte) error {
	msg := new(video.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedListArgs_Req_DEFAULT *video.FeedRequest

func (p *GetFeedListArgs) GetReq() *video.FeedRequest {
	if !p.IsSetReq() {
		return GetFeedListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFeedListResult struct {
	Success *video.FeedResponse
}

var GetFeedListResult_Success_DEFAULT *video.FeedResponse

func (p *GetFeedListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.FeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFeedListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFeedListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFeedListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedListResult) Unmarshal(in []byte) error {
	msg := new(video.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedListResult) GetSuccess() *video.FeedResponse {
	if !p.IsSetSuccess() {
		return GetFeedListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.FeedResponse)
}

func (p *GetFeedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getPublishIdsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.PublishIdsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetPublishIds(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetPublishIdsArgs:
		success, err := handler.(video.VideoService).GetPublishIds(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetPublishIdsResult)
		realResult.Success = success
	}
	return nil
}
func newGetPublishIdsArgs() interface{} {
	return &GetPublishIdsArgs{}
}

func newGetPublishIdsResult() interface{} {
	return &GetPublishIdsResult{}
}

type GetPublishIdsArgs struct {
	Req *video.PublishIdsRequest
}

func (p *GetPublishIdsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.PublishIdsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetPublishIdsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetPublishIdsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetPublishIdsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetPublishIdsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetPublishIdsArgs) Unmarshal(in []byte) error {
	msg := new(video.PublishIdsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetPublishIdsArgs_Req_DEFAULT *video.PublishIdsRequest

func (p *GetPublishIdsArgs) GetReq() *video.PublishIdsRequest {
	if !p.IsSetReq() {
		return GetPublishIdsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetPublishIdsArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetPublishIdsResult struct {
	Success *video.PublishIdsResponse
}

var GetPublishIdsResult_Success_DEFAULT *video.PublishIdsResponse

func (p *GetPublishIdsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.PublishIdsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetPublishIdsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetPublishIdsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetPublishIdsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetPublishIdsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetPublishIdsResult) Unmarshal(in []byte) error {
	msg := new(video.PublishIdsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetPublishIdsResult) GetSuccess() *video.PublishIdsResponse {
	if !p.IsSetSuccess() {
		return GetPublishIdsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetPublishIdsResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.PublishIdsResponse)
}

func (p *GetPublishIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(video.VideoInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(video.VideoService).GetVideoInfo(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetVideoInfoArgs:
		success, err := handler.(video.VideoService).GetVideoInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVideoInfoResult)
		realResult.Success = success
	}
	return nil
}
func newGetVideoInfoArgs() interface{} {
	return &GetVideoInfoArgs{}
}

func newGetVideoInfoResult() interface{} {
	return &GetVideoInfoResult{}
}

type GetVideoInfoArgs struct {
	Req *video.VideoInfoRequest
}

func (p *GetVideoInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(video.VideoInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetVideoInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetVideoInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetVideoInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetVideoInfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetVideoInfoArgs) Unmarshal(in []byte) error {
	msg := new(video.VideoInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVideoInfoArgs_Req_DEFAULT *video.VideoInfoRequest

func (p *GetVideoInfoArgs) GetReq() *video.VideoInfoRequest {
	if !p.IsSetReq() {
		return GetVideoInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVideoInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetVideoInfoResult struct {
	Success *video.VideoInfoResponse
}

var GetVideoInfoResult_Success_DEFAULT *video.VideoInfoResponse

func (p *GetVideoInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(video.VideoInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetVideoInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetVideoInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetVideoInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetVideoInfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetVideoInfoResult) Unmarshal(in []byte) error {
	msg := new(video.VideoInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVideoInfoResult) GetSuccess() *video.VideoInfoResponse {
	if !p.IsSetSuccess() {
		return GetVideoInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVideoInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*video.VideoInfoResponse)
}

func (p *GetVideoInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishVideo(ctx context.Context, Req *video.PublishActionRequest) (r *video.PublishActionResponse, err error) {
	var _args PublishVideoArgs
	_args.Req = Req
	var _result PublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, Req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args PublishListArgs
	_args.Req = Req
	var _result PublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideoCount(ctx context.Context, Req *video.PublishVideoCountRequest) (r *video.PublishVideoCountResponse, err error) {
	var _args PublishVideoCountArgs
	_args.Req = Req
	var _result PublishVideoCountResult
	if err = p.c.Call(ctx, "PublishVideoCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFeedList(ctx context.Context, Req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args GetFeedListArgs
	_args.Req = Req
	var _result GetFeedListResult
	if err = p.c.Call(ctx, "GetFeedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishIds(ctx context.Context, Req *video.PublishIdsRequest) (r *video.PublishIdsResponse, err error) {
	var _args GetPublishIdsArgs
	_args.Req = Req
	var _result GetPublishIdsResult
	if err = p.c.Call(ctx, "GetPublishIds", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoInfo(ctx context.Context, Req *video.VideoInfoRequest) (r *video.VideoInfoResponse, err error) {
	var _args GetVideoInfoArgs
	_args.Req = Req
	var _result GetVideoInfoResult
	if err = p.c.Call(ctx, "GetVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
