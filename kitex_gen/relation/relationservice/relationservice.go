// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "dousheng/kitex_gen/relation"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":   kitex.NewMethodInfo(relationActionHandler, newRelationActionArgs, newRelationActionResult, false),
		"GetFollowList":    kitex.NewMethodInfo(getFollowListHandler, newGetFollowListArgs, newGetFollowListResult, false),
		"GetFollowerList":  kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
		"GetFriendList":    kitex.NewMethodInfo(getFriendListHandler, newGetFriendListArgs, newGetFriendListResult, false),
		"GetFollowCount":   kitex.NewMethodInfo(getFollowCountHandler, newGetFollowCountArgs, newGetFollowCountResult, false),
		"GetFollowerCount": kitex.NewMethodInfo(getFollowerCountHandler, newGetFollowerCountArgs, newGetFollowerCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).RelationAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RelationActionArgs:
		success, err := handler.(relation.RelationService).RelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationActionResult)
		realResult.Success = success
	}
	return nil
}
func newRelationActionArgs() interface{} {
	return &RelationActionArgs{}
}

func newRelationActionResult() interface{} {
	return &RelationActionResult{}
}

type RelationActionArgs struct {
	Req *relation.RelationActionRequest
}

func (p *RelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RelationActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RelationActionArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationActionArgs_Req_DEFAULT *relation.RelationActionRequest

func (p *RelationActionArgs) GetReq() *relation.RelationActionRequest {
	if !p.IsSetReq() {
		return RelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type RelationActionResult struct {
	Success *relation.RelationActionResponse
}

var RelationActionResult_Success_DEFAULT *relation.RelationActionResponse

func (p *RelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RelationActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RelationActionResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationActionResult) GetSuccess() *relation.RelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationActionResponse)
}

func (p *RelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowListArgs:
		success, err := handler.(relation.RelationService).GetFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowListArgs() interface{} {
	return &GetFollowListArgs{}
}

func newGetFollowListResult() interface{} {
	return &GetFollowListResult{}
}

type GetFollowListArgs struct {
	Req *relation.RelationFollowListRequest
}

func (p *GetFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowListArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowListArgs_Req_DEFAULT *relation.RelationFollowListRequest

func (p *GetFollowListArgs) GetReq() *relation.RelationFollowListRequest {
	if !p.IsSetReq() {
		return GetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowListResult struct {
	Success *relation.RelationFollowListResponse
}

var GetFollowListResult_Success_DEFAULT *relation.RelationFollowListResponse

func (p *GetFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowListResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowListResult) GetSuccess() *relation.RelationFollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationFollowListResponse)
}

func (p *GetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(relation.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *relation.RelationFollowerListRequest
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *relation.RelationFollowerListRequest

func (p *GetFollowerListArgs) GetReq() *relation.RelationFollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerListResult struct {
	Success *relation.RelationFollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *relation.RelationFollowerListResponse

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *relation.RelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationFollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationFriendListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFriendList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFriendListArgs:
		success, err := handler.(relation.RelationService).GetFriendList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFriendListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFriendListArgs() interface{} {
	return &GetFriendListArgs{}
}

func newGetFriendListResult() interface{} {
	return &GetFriendListResult{}
}

type GetFriendListArgs struct {
	Req *relation.RelationFriendListRequest
}

func (p *GetFriendListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationFriendListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFriendListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFriendListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFriendListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFriendListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFriendListArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationFriendListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFriendListArgs_Req_DEFAULT *relation.RelationFriendListRequest

func (p *GetFriendListArgs) GetReq() *relation.RelationFriendListRequest {
	if !p.IsSetReq() {
		return GetFriendListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFriendListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFriendListResult struct {
	Success *relation.RelationFriendListResponse
}

var GetFriendListResult_Success_DEFAULT *relation.RelationFriendListResponse

func (p *GetFriendListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationFriendListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFriendListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFriendListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFriendListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFriendListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFriendListResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationFriendListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFriendListResult) GetSuccess() *relation.RelationFriendListResponse {
	if !p.IsSetSuccess() {
		return GetFriendListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFriendListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationFriendListResponse)
}

func (p *GetFriendListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationFollowCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowCountArgs:
		success, err := handler.(relation.RelationService).GetFollowCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowCountArgs() interface{} {
	return &GetFollowCountArgs{}
}

func newGetFollowCountResult() interface{} {
	return &GetFollowCountResult{}
}

type GetFollowCountArgs struct {
	Req *relation.RelationFollowCountRequest
}

func (p *GetFollowCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationFollowCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowCountArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowCountArgs_Req_DEFAULT *relation.RelationFollowCountRequest

func (p *GetFollowCountArgs) GetReq() *relation.RelationFollowCountRequest {
	if !p.IsSetReq() {
		return GetFollowCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowCountResult struct {
	Success *relation.RelationFollowCountResponse
}

var GetFollowCountResult_Success_DEFAULT *relation.RelationFollowCountResponse

func (p *GetFollowCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationFollowCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowCountResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowCountResult) GetSuccess() *relation.RelationFollowCountResponse {
	if !p.IsSetSuccess() {
		return GetFollowCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationFollowCountResponse)
}

func (p *GetFollowCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationFollowerCountRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerCount(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerCountArgs:
		success, err := handler.(relation.RelationService).GetFollowerCount(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerCountResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerCountArgs() interface{} {
	return &GetFollowerCountArgs{}
}

func newGetFollowerCountResult() interface{} {
	return &GetFollowerCountResult{}
}

type GetFollowerCountArgs struct {
	Req *relation.RelationFollowerCountRequest
}

func (p *GetFollowerCountArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationFollowerCountRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerCountArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerCountArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerCountArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerCountArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerCountArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowerCountRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerCountArgs_Req_DEFAULT *relation.RelationFollowerCountRequest

func (p *GetFollowerCountArgs) GetReq() *relation.RelationFollowerCountRequest {
	if !p.IsSetReq() {
		return GetFollowerCountArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerCountArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerCountResult struct {
	Success *relation.RelationFollowerCountResponse
}

var GetFollowerCountResult_Success_DEFAULT *relation.RelationFollowerCountResponse

func (p *GetFollowerCountResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationFollowerCountResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerCountResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerCountResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerCountResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerCountResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerCountResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationFollowerCountResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerCountResult) GetSuccess() *relation.RelationFollowerCountResponse {
	if !p.IsSetSuccess() {
		return GetFollowerCountResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationFollowerCountResponse)
}

func (p *GetFollowerCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, Req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args RelationActionArgs
	_args.Req = Req
	var _result RelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, Req *relation.RelationFollowListRequest) (r *relation.RelationFollowListResponse, err error) {
	var _args GetFollowListArgs
	_args.Req = Req
	var _result GetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *relation.RelationFollowerListRequest) (r *relation.RelationFollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, Req *relation.RelationFriendListRequest) (r *relation.RelationFriendListResponse, err error) {
	var _args GetFriendListArgs
	_args.Req = Req
	var _result GetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowCount(ctx context.Context, Req *relation.RelationFollowCountRequest) (r *relation.RelationFollowCountResponse, err error) {
	var _args GetFollowCountArgs
	_args.Req = Req
	var _result GetFollowCountResult
	if err = p.c.Call(ctx, "GetFollowCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerCount(ctx context.Context, Req *relation.RelationFollowerCountRequest) (r *relation.RelationFollowerCountResponse, err error) {
	var _args GetFollowerCountArgs
	_args.Req = Req
	var _result GetFollowerCountResult
	if err = p.c.Call(ctx, "GetFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
