// Code generated by Kitex v0.4.4. DO NOT EDIT.

package feedservice

import (
	"context"
	feed "dousheng/kitex_gen/feed"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceServiceInfo
}

var feedServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FeedService"
	handlerType := (*feed.FeedService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeedList": kitex.NewMethodInfo(getFeedListHandler, newGetFeedListArgs, newGetFeedListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "feed",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(feed.FeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(feed.FeedService).GetFeedList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFeedListArgs:
		success, err := handler.(feed.FeedService).GetFeedList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFeedListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFeedListArgs() interface{} {
	return &GetFeedListArgs{}
}

func newGetFeedListResult() interface{} {
	return &GetFeedListResult{}
}

type GetFeedListArgs struct {
	Req *feed.FeedRequest
}

func (p *GetFeedListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(feed.FeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFeedListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFeedListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFeedListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFeedListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFeedListArgs) Unmarshal(in []byte) error {
	msg := new(feed.FeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFeedListArgs_Req_DEFAULT *feed.FeedRequest

func (p *GetFeedListArgs) GetReq() *feed.FeedRequest {
	if !p.IsSetReq() {
		return GetFeedListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFeedListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFeedListResult struct {
	Success *feed.FeedResponse
}

var GetFeedListResult_Success_DEFAULT *feed.FeedResponse

func (p *GetFeedListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(feed.FeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFeedListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFeedListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFeedListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFeedListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFeedListResult) Unmarshal(in []byte) error {
	msg := new(feed.FeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFeedListResult) GetSuccess() *feed.FeedResponse {
	if !p.IsSetSuccess() {
		return GetFeedListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFeedListResult) SetSuccess(x interface{}) {
	p.Success = x.(*feed.FeedResponse)
}

func (p *GetFeedListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeedList(ctx context.Context, Req *feed.FeedRequest) (r *feed.FeedResponse, err error) {
	var _args GetFeedListArgs
	_args.Req = Req
	var _result GetFeedListResult
	if err = p.c.Call(ctx, "GetFeedList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
